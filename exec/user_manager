#!/usr/bin/env python3
from pathlib import Path

from fire import Fire
import pandas as pd
from plumbum import FG
from plumbum.cmd import adduser, deluser, newusers, sudo, xdg_user_dirs_update


class UserManager:
    def add_user(
        self,
        username,
        configs: str | Path | list[str] | list[Path] | None = None,
        *,
        interactive=False,
    ):
        options = []

        if configs:
            if isinstance(configs, (str, Path)):
                configs = [configs]

            for config in configs:
                options += ["--conf", config]

        options.append(username)

        cmd_adduser = sudo[adduser[*options]]
        print(cmd_adduser)

        if interactive:
            cmd_adduser & FG
        else:
            cmd_adduser()

        # 更新用户目录
        cmd_dirs = sudo["-u", username, xdg_user_dirs_update]
        print(cmd_dirs)

        cmd_dirs()

    def add_users(
        self,
        file: str | Path,
        configs: str | Path | list[str] | list[Path] | None = None,
    ):
        usernames = self.read_usernames(file)

        for username in usernames:
            try:
                self.add_user(username, configs)
            except Exception as e:
                print(e)

        # 然后使用 newusers 命令批量更新用户
        cmd_newusers = sudo[newusers[file]]
        print(cmd_newusers)

        cmd_newusers & FG

    def remove_user(self, username, *, purge=False):
        options = []
        if purge:
            options.append("--remove-home")

        options.append(username)

        cmd_deluser = sudo[deluser[*options]]
        print(cmd_deluser)

        cmd_deluser & FG

    def remove_users(self, file: str | Path, *, purge=False):
        usernames = self.read_usernames(file)

        for username in usernames:
            try:
                self.remove_user(username, purge=purge)
            except Exception as e:
                print(e)

    def read_usernames(self, file: str | Path):
        file_path = Path(file).expanduser().resolve()
        if not file_path.is_file():
            msg = f"File not found: {file_path}"
            raise FileNotFoundError(msg)
        if file_path.suffix.casefold() != ".usv":
            msg = f"Unsupported file type: {file_path}"
            raise ValueError(msg)

        users = pd.read_csv(file_path, sep=":", header=None)
        usernames = users[0]
        usernames = usernames.to_list()
        return usernames


if __name__ == "__main__":
    Fire(UserManager)
