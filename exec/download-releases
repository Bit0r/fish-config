#!/usr/bin/python

# %%
import os
from pathlib import Path
import re

import clevercsv
from dotenv import load_dotenv
from fire import Fire
from github import Auth, Github
from github.GithubException import UnknownObjectException
from github.GitReleaseAsset import GitReleaseAsset
import httpx
from loguru import logger
from more_itertools import first_true
from pint import UnitRegistry
from pydumpling import catch_any_exception
from rich.progress import Progress

# %%
catch_any_exception()
load_dotenv()


# %%
class GithubDownload:
    def __init__(self, token: str | None = None):
        self.token = token

        self.amd64: re.Pattern = re.compile(r"(amd|x86[-_])64")
        self.cksum_suffies = ".sha256 .minisig .asc .sig".split()

    def get_asset_priority(self, asset):
        """
        0. gnu.deb,*.xpi
        1. musl.deb
        2. gnu.run
        3. musl.run
        4. gnu.AppImage
        5. musl.AppImage

        6. gnu.zip or gnu.tar.gz
        7. musl.zip or gnu.tar.gz

        8. no-amd64-gnu.deb
        9. no-amd64-musl.deb
        10. no-amd64-gnu.run
        11. no-amd64-musl.run
        12. no-amd64-gnu.AppImage
        13. no-amd64-musl.AppImage

        14. no-amd64-gnu.zip or no-amd64-gnu.tar.gz
        15. no-amd64-musl.zip or no-amd64-gnu.tar.gz

        16. other
        """
        priority = 0

        name_path = Path(asset.name.casefold())
        name_stem = name_path.stem.casefold()
        name_suffix = name_path.suffix.casefold()

        if name_suffix in self.cksum_suffies:
            # 如果是校验文件，那么就不用下载
            return 16

        if name_suffix not in [".deb", ".xpi"] and "ubuntu" not in name_stem:
            # 如果后缀名不是deb或者xpi，而且名字中不包含ubuntu，那么优先级下调1
            priority += 2
        if priority >= 2 and name_suffix != ".run":
            # 也不是run包，那么优先级下调2
            priority += 2
        if priority >= 4 and name_suffix != ".appimage":
            # 也不是AppImage包，那么优先级下调2
            priority += 2

        if "musl" in name_stem:
            # 是musl包，那么优先级下调1
            priority += 1

        if not self.amd64.search(name_stem):
            # 不是amd64包，那么优先级下调8
            priority += 8

        if (
            0 <= priority <= 5
            or 8 <= priority <= 13
            or ((6 <= priority <= 7 or 14 <= priority <= 15) and "linux" in name_stem)
        ):
            # 如果优先级是0-5, 8-13, 或者是6-7, 14-15并且是linux包，那么直接返回优先级
            return priority

        # 其他情况
        return 16

    def get_highest_priority_asset(
        self, assets: list[GitReleaseAsset]
    ) -> GitReleaseAsset | None:
        priority_assets = [None] * 17

        for asset in assets:
            priority = self.get_asset_priority(asset)
            priority_assets[priority] = asset

        # 去掉最后一个元素，因为最后一个元素是other
        priority_assets = priority_assets[:-1]

        # 返回优先级最高的asset
        return first_true(priority_assets)

    def down_latest_asset(
        self,
        repo: str,
        version: str | None = None,
        *,
        progress: Progress = None,
        output_dir: str | Path = "./",
    ):
        output_dir = Path(output_dir).expanduser().resolve()
        output_dir.mkdir(parents=True, exist_ok=True)

        gh = self.gh_client
        latest_release = gh.get_repo(repo).get_latest_release()
        assets = latest_release.get_assets()
        asset = self.get_highest_priority_asset(assets)

        if asset is None:
            logger.error(f"{repo}: no assets")
            return

        latest_version = latest_release.tag_name
        if version and latest_version == version:
            logger.info(f"{repo}: already up to date")
            return

        # 下载asset
        logger.info(f"Downloading {asset.name}")
        ureg = UnitRegistry()

        with self.httpx_client.stream(
            "GET", asset.browser_download_url
        ) as response, open(output_dir / asset.name, "wb") as f:
            if progress:
                task = progress.add_task(f"Downloading {asset.name}", total=asset.size)
                total_mb = (asset.size * ureg.byte).to(ureg.megabyte)

            for chunk in response.iter_bytes():
                f.write(chunk)

                if progress:
                    downloaded_mb = (response.num_bytes_downloaded * ureg.byte).to(
                        ureg.megabyte
                    )
                    progress.update(
                        task,
                        refresh=True,
                        completed=response.num_bytes_downloaded,
                        description=f"{asset.name}: {downloaded_mb.magnitude:.2f}/{total_mb.magnitude:.2f}MB",
                    )

            if progress:
                # 增加一个空行，防止进度条和日志混在一起
                print(file=progress.console.file)
                # 下载完成
                progress.remove_task(task)

        # 返回最新版本号
        return latest_version

    def download_list(
        self,
        releases: list[list[str]],
        *,
        progress: Progress = None,
        output_dir: str | Path = "./",
    ):
        for idx, release in enumerate(releases):
            if len(release) > 3:
                # 注释行
                continue

            repo, version, description = release

            if not repo:
                # 没有repo，那么就跳过
                logger.warning(f"Line {idx + 1}: no repo")
                continue

            try:
                new_version = self.down_latest_asset(
                    repo, version, progress=progress, output_dir=output_dir
                )
            except UnknownObjectException as e:
                logger.error(f"{repo}: {e}")
                continue

            if new_version is not None:
                releases[idx][1] = new_version

    def download_all(
        self,
        lockfile: str | Path = "./releases.csv",
        *,
        token=os.environ["GH_TOKEN"],
        output_dir: str | Path = "./",
    ):
        output_dir = Path(output_dir).expanduser().resolve()
        lockfile_path = Path(lockfile).expanduser().resolve()
        if not lockfile_path.exists():
            logger.error(f"{lockfile_path} not found")
            return

        token = token or self.token
        if token is None:
            logger.error("No GITHUB_TOKEN found")
            return

        releases = clevercsv.read_table(lockfile_path)[1:]

        self.gh_client = Github(auth=Auth.Token(token))
        limits = httpx.Limits(max_connections=4, max_keepalive_connections=2)
        self.httpx_client = httpx.Client(
            headers={"Authorization": f"Bearer {token}"},
            follow_redirects=True,
            proxies="socks5://localhost:1080",
            limits=limits,
            http2=True,
        )

        try:
            with Progress(auto_refresh=False) as progress:
                self.download_list(releases, progress=progress, output_dir=output_dir)
        finally:
            # 保存最新的版本号
            releases.insert(0, ["repository", "version", "description"])
            releases = [release for release in releases if len(release) <= 3]
            clevercsv.write_table(releases, output_dir / lockfile_path.name)


# %%
if __name__ == "__main__":
    # %%
    gd = GithubDownload()
    Fire(gd.download_all)
